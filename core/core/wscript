from Configure import conftest
from TaskGen import feature, extension, before, after

sources = [
	"representation/combinedrepresentation_generator.py",
	"tensorpotential/tensorpotentialmultiply_generator.py",
	"representation/overlapmatrix.cpp",
	"utility/blitzblas.cpp",
	"utility/gamma.cpp",
	"wavefunction.cpp",
	"representation/combinedrepresentation.cpp",
	"configuration.cpp",
	"mpi/distributedmodel.cpp",
#	"finitediff/exponentialfinitedifference.cpp",
	"utility/timer.cpp",
	"utility/matrix_conversion.cpp",
	"trilinos/pyprop_epetra.cpp",
	"trilinos/pyprop_tpetra.cpp",
	"representation/distributedoverlapmatrix.cpp",
]

pyste_module = "libcore"
pyste_sources = [
	"python/wavefunction.pyste",	
]

#------------------ Custom Extensions ---------------------------

@extension("representation/combinedrepresentation_generator.py")
def extension_combinedrepresentation_generator(taskGen, node):
	#make Node from input
	node = taskGen.path.find_resource(node)
	outputNode = taskGen.path.find_or_declare("representation/combinedrepresentation_generated.cpp")
	tpmHeaderNode = taskGen.path.find_or_declare("tensorpotential/tensorpotentialmultiply_wrapper.h")

	task = taskGen.create_task("python_generate_cpp")
	task.set_inputs(node)
	task.deps_nodes.append(tpmHeaderNode) # make sure it runs after tensorpotential_generator
	task.set_outputs(outputNode)

	taskGen.allnodes.append(outputNode)

@extension("tensorpotential/tensorpotentialmultiply_generator.py")
def extension_tensorpotential_generator(taskGen, node):
	#make Node from input
	node = taskGen.path.find_resource(node)

	splitCount = 5
	for i in range(splitCount):
		outputNode = taskGen.path.find_or_declare("tensorpotential/tensorpotentialmultiply_%i.f90" % i)
		task = taskGen.create_task("python_generate_fortran")
		task.set_inputs(node)
		task.set_outputs(outputNode)
		task.params = ["--print-fortran", "--split-count=%i" % splitCount, "--split-index=%i" % i]
		taskGen.allnodes.append(outputNode)

	outputNode = taskGen.path.find_or_declare("tensorpotential/tensorpotentialmultiply_wrapper.h")
	task = taskGen.create_task("python_generate_cpp")
	task.set_inputs(node)
	task.set_outputs(outputNode)
	task.params = ["--print-cpp-header"]

	outputNode = taskGen.path.find_or_declare("tensorpotential/tensorpotentialmultiply_wrapper.cpp")
	task = taskGen.create_task("python_generate_cpp")
	task.set_inputs(node)
	task.set_outputs(outputNode)
	task.params = ["--print-cpp-code"]
	taskGen.allnodes.append(outputNode)



def set_options(opt):
	pass

def configure(conf):
	print("---> Configuring core/core")


def build(bld):
	tskgen = bld.new_task_gen(
		features="pyste compile link",
		source=sources,
		pyste_files=pyste_sources,
		pyste_module=pyste_module,
	)


	

