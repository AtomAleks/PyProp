from Configure import conftest
from TaskGen import feature, extension, before, after

sources = [
	"tensorpotential/tensorpotentialmultiply_generator.py",
	"representation/combinedrepresentation_generator.py",
	"representation/overlapmatrix.cpp",
	"utility/blitzblas.cpp",
	"utility/gamma.cpp",
	"wavefunction.cpp",
	"representation/combinedrepresentation.cpp",
	"representation/customgridrepresentation.cpp",
	"configuration.cpp",
	"mpi/distributedmodel.cpp",
	"utility/timer.cpp",
	"utility/matrix_conversion.cpp",
	"trilinos/pyprop_epetra.cpp",
	"trilinos/pyprop_tpetra.cpp",
	"representation/distributedoverlapmatrix.cpp",
]

pyste_module = "libcore"
pyste_sources = [
	"pyste/distributedmodel.pyste",          
	"pyste/distributedoverlapmatrix.pyste",
	"pyste/wavefunction.pyste",	
	"pyste/arrayfunctions.pyste",
	"pyste/blitzblas.pyste",                 
	"pyste/overlapmatrix.pyste",
	"pyste/blitzwrapper.pyste",              
	"pyste/papi.pyste",
	"pyste/representation.pyste",
	"pyste/combinedrepresentation.pyste",    
	"pyste/configurationwrapper.pyste",      
	"pyste/staticpotential.pyste",
	"pyste/tensorpotential_basis.pyste",
	"pyste/customgridrepresentation.pyste",  
	"pyste/tensorpotential.pyste",
	"pyste/databuffer.pyste",                
	"pyste/vectorrepresentation.pyste",
]

#------------------ Custom Extensions ---------------------------

@extension("representation/combinedrepresentation_generator.py")
def extension_combinedrepresentation_generator(taskGen, node):
	#make Node from input
	node = taskGen.path.find_resource(node)
	outputNode = taskGen.path.find_or_declare("representation/combinedrepresentation_generated.cpp")
	tpmHeaderNode = taskGen.path.find_or_declare("tensorpotential/tensorpotentialmultiply_wrapper.h")

	task = taskGen.create_task("python_generate_cpp")
	task.set_inputs(node)
	task.deps_nodes.append(tpmHeaderNode) # make sure it runs after tensorpotential_generator
	task.set_outputs(outputNode)

	taskGen.allnodes.append(outputNode)

@extension("tensorpotential/tensorpotentialmultiply_generator.py")
def extension_tensorpotential_generator(taskGen, node):
	#make Node from input
	node = taskGen.path.find_resource(node)

	outNodes = []
	splitCount = 5
	for i in range(splitCount):
		#create task to generate f90
		outputNode = taskGen.path.find_or_declare("tensorpotential/tensorpotentialmultiply_%i.f90" % i)
		task = taskGen.create_task("python_generate_fortran")
		task.set_inputs(node)
		task.set_outputs(outputNode)
		task.params = ["--print-fortran", "--split-count=%i" % splitCount, "--split-index=%i" % i]
		outNodes.append(outputNode)
		
		#create task to compile f90
		ext = taskGen.get_hook(outputNode.suffix())
		compTask = ext(taskGen, outputNode)

		if i > 0:
			#all tasks depend on the first one, in order to generate indextricks.mod
			compTask.deps_nodes.append(outNodes[0])

	outputNode = taskGen.path.find_or_declare("tensorpotential/tensorpotentialmultiply_wrapper.h")
	task = taskGen.create_task("python_generate_cpp")
	task.set_inputs(node)
	task.set_outputs(outputNode)
	task.params = ["--print-cpp-header"]

	outputNode = taskGen.path.find_or_declare("tensorpotential/tensorpotentialmultiply_wrapper.cpp")
	task = taskGen.create_task("python_generate_cpp")
	task.set_inputs(node)
	task.set_outputs(outputNode)
	task.params = ["--print-cpp-code"]
	taskGen.allnodes.append(outputNode)



def set_options(opt):
	pass

def configure(conf):
	print("---> Configuring core")


def build(bld):
	tskgen = bld.new_task_gen(
		features="pyste compile link",
		source=sources,
		pyste_files=pyste_sources,
		pyste_module=pyste_module,
	)


	

